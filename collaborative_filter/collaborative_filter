#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri May  1 13:25:38 2020

@author: Sweta Kumari
"""
import numpy as np
from sklearn.metrics.pairwise import pairwise_distances


class CollaborativeFilter:
    '''
    This filter can be used to find user-item and item-item based filter for 
    predicting rating and similarities can be found using :-
    1) Cosine Similarites
    And RMSE and MSE can be used for finding error
    '''
    def __init__(self, items, users, datamatrix, type='both', similarity = 'cosine'):
        self.__items = items
        self.__users = users
        self.__type = type
        self.__similarity_measure = similarity
        self.__user_similarity = None
        self.__item_similarity = None
        self.__datamatrix = datamatrix
        self.__user_prediction = None
        self.__item_prediction = None

    def getitems(self):
        return self.__items

    def getusers(self):
        return self.__users

    def gettype(self):
        return self.__type

    def getrating(self):
        return self.__rating

    def getsimilarityalgo(self):
        return self.__similarity_measure

    def getdatamatrix(self):
        return self.__datamatrix

    def getusersimilarity(self):
        return self.__user_similarity

    def getitemsimilarity(self):
        return self.__item_similarity

    def setsimilarity(self):
        if self.gettype() == 'both': 
            self.__user_similarity = 1-pairwise_distances(self.getdatamatrix(),\
            metric=self.getsimilarityalgo())
            self.__item_similarity = 1-pairwise_distances(self.getdatamatrix().T,\
            metric=self.getsimilarityalgo())
        elif self.gettype() == 'user':
            self.__user_similarity = 1-pairwise_distances(self.getdatamatrix(),\
            metric=self.getsimilarityalgo())
        elif self.gettype() == 'item':
            self.__item_similarity = 1-pairwise_distances(self.getdatamatrix().T,\
            metric=self.getsimilarityalgo())

    def setuser_prediction(self):
        mean_user_rating = np.true_divide(self.getdatamatrix().sum(1),(self.getdatamatrix()!=0).sum(1))
        row,col = self.getdatamatrix().shape
        rating_diff  = np.zeros((row, col))
        for i in range(row):
            for j in range(col):
                if self.getdatamatrix()[i][j]!=0:
                    rating_diff[i][j] = self.getdatamatrix()[i][j] - mean_user_rating[:, np.newaxis][i][0]
        self.__user_prediction = np.round(mean_user_rating[:, np.newaxis]\
        + (self.getusersimilarity().dot(rating_diff)\
        / np.array([np.abs(self.getusersimilarity()).sum(axis=1)]).T))
        
    def setitem_prediction(self):
        self.__item_prediction = np.ceil((self.getdatamatrix().dot(self.getitemsimilarity())\
        / np.array([np.abs(self.getitemsimilarity()).sum(axis=1)])))
        #row,col = self.getdatamatrix().shape
        #rating_diff  = np.zeros((row, col))
       
    def error(self):
        if self.gettype() == 'both':
            return {'user-user CF':{
                                    'RMSE':np.sqrt(np.mean((self.__user_prediction-self.getdatamatrix())**2)),
                                    'MAE':np.mean(np.abs(self.__user_prediction-self.getdatamatrix()))},
                    'item-item CF':{
                                    'RMSE':np.sqrt(np.mean((self.__item_prediction-self.getdatamatrix())**2)),
                                    'MAE':np.mean(np.abs(self.__item_prediction-self.getdatamatrix()))
                                    }
                    }
        elif self.gettype() == 'user':
            return {
                    'RMSE':np.sqrt(np.mean((self.__user_prediction-self.getdatamatrix())**2)),
                    'MAE':np.mean(np.abs(self.__user_prediction-self.getdatamatrix()))}
        elif self.gettype() == 'item':
            return {
                    'RMSE':np.sqrt(np.mean((self.__item_prediction-self.getdatamatrix())**2)),
                    'MAE':np.mean(np.abs(self.__item_prediction-self.getdatamatrix()))
                    }
    def fit(self):
        self.setsimilarity()
        if self.gettype() == 'both':
            self.setuser_prediction()
            self.setitem_prediction()
        elif self.gettype() == 'user':
            self.setuser_prediction()
        elif self.gettype() == 'item':
            self.setitem_prediction()
            
    def getpred(self):
        if self.gettype() == 'both':
            return {'user':self.__user_prediction,\
            'item':self.__item_prediction,'error' : self.error()}
        elif self.gettype() == 'user':
            return {"user":self.__user_prediction,'error':self.error()}
        elif self.gettype() == 'item':
            return {"item":self.__item_prediction,'error':self.error()}



    
def recommendation(user_id,M,number_of_movie,movies_info,age_wise,occupation_wise,gender_wise,sorted_age):
    try:
        pred_ratings = M[user_id,]
        movie = {i:0 for i in range(len(pred_ratings))}
        for i in range(len(pred_ratings)):
            movie[i] = pred_ratings[i]
        recommended = sorted(movie.items(),reverse = True, key=lambda x:x[1])[:number_of_movie]
        for i in recommended:
          print("Recommendation movie name is : {} ".format(str(movies_info.loc[movies_info['movie_id']==i[0]+1]['movie_name']).split('\n')[0].split(' ')[-1]))
    except:
        res = get_io()
        cold_start_recommendation(age_wise,occupation_wise,gender_wise,movies_info,sorted_age,number_of_movie,res)

def cold_start_recommendation(age_wise,occupation_wise,gender_wise,movies_info,sorted_age,k,io):
    flag = io['flag']
    if flag == 'age':
        recommended = get_age_wise_choice_top_k(age_wise,k,io['age'],sorted_age)
        for i in recommended:
            print("Recommendation movie name is : {} ".format(str(movies_info.loc[movies_info['movie_id']==i]['movie_name']).split('\n')[0].split(' ')[-1]))
    elif flag == 'occ':
        recommended = get_occupation_wise_choice_top_k(occupation_wise,k,io['occ'])
        for i in recommended:
            print("Recommendation movie name is : {} ".format(str(movies_info.loc[movies_info['movie_id']==i]['movie_name']).split('\n')[0].split(' ')[-1]))
    elif flag == 'gender':
        recommended = get_gender_wise_choice_top_k(gender_wise,k,io['gen'])
        for i in recommended:
            print("Recommendation movie name is : {} ".format(str(movies_info.loc[movies_info['movie_id']==i]['movie_name']).split('\n')[0].split(' ')[-1]))
    else:
        print("No info is provided by you...:|")
#class SimilarityAnalyser
#### testing

import pandas as pd

r_cols = ['user_id', 'movie_id', 'rating', 'unix_timestamp']
rating_data = pd.read_csv('./dataset/ml-100k/ua.base', sep='\t', names=r_cols, encoding='latin-1')
#ratings_test = pd.read_csv('./dataset/ml-100k/ua.test', sep='\t', names=r_cols, encoding='latin-1')
rating_data = rating_data.drop('unix_timestamp',axis=1)

rating_data.user_id.astype(int)


u_cols = ['user_id','age','gender','occupation','zip code']
user_info = pd.read_csv('./dataset/ml-100k/u.user', sep='|', names=u_cols, encoding='latin-1')
user_info = user_info.drop('zip code', axis=1)
user_info.user_id.astype(int)

m_cols =['movie_id','movie_name','release_date'] 
movies_info = pd.read_csv('./dataset/ml-100k/u.item', sep='|', names = m_cols,encoding='latin-1')
movies_info = movies_info.drop('release_date', axis = 1)

movies_info.movie_id.astype(int)

complete_data = user_info.merge(rating_data, on = 'user_id')
map_sex = {'F':1,'M':0}
complete_data['gender']= complete_data['gender'].map(map_sex).astype(int)
complete_data = complete_data.drop('user_id',axis =1 )


age_wise = complete_data.groupby(['age'])
distinct_age = complete_data.age.unique()
distinct_age.sort()
gender_wise = complete_data.groupby(['gender'])
distinct_gender = complete_data.gender.unique()

occupation_wise = complete_data.groupby(['occupation'])
distinct_occupation = complete_data.occupation.unique()

def age_group(sorted_age_group,age):
    for i in sorted_age_group :
        if i > age :
            return i
    return 

def get_occupation_wise_choice_top_k(occupation_wise,k,occupation):
    try:
        df = occupation_wise.get_group(occupation)
        return df.sort_values(by=['rating'], ascending=False)[:k].movie_id
    except:
        df = occupation_wise.get_group('other')
        return df.sort_values(by=['rating'], ascending=False)[:k].movie_id
def get_gender_wise_choice_top_k(gender_wise,k,gender):
    try:
        df = gender_wise.get_group(gender)
        return df.sort_values(by=['rating'], ascending=False)[:k].movie_id
    except:
        df = gender_wise.get_group(1)
        return df.sort_values(by=['rating'], ascending=False)[:k].movie_id
def get_age_wise_choice_top_k(age_wise,k,age,sorted_age):
    try:
        df = age_wise.get_group(age)
        return df.sort_values(by=['rating'], ascending=False)[:k].movie_id
    except:
        df = age_wise.get_group(age_group(sorted_age,age))
        return df.sort_values(by=['rating'], ascending=False)[:k].movie_id

# Now getting unique field 'movieId' and 'userId' from rating
n_users = rating_data.user_id.unique().shape[0]
# maximum is used because some movies ratings are not available
#n_items = rating_data.movie_id.unique().shape[0]
n_items = max(rating_data.movie_id.unique())

# Now creating matrix with n_users X n_items

data_matrix = np.zeros((n_users, n_items))
for line in rating_data.itertuples():
    data_matrix[line[1]-1, line[2]-1] = line[3]




## Item-User based
## User-User based
'''
cf = CollaborativeFilter(n_items, n_users, data_matrix, type='user', similarity = 'cosine')
cf.fit()
pred_mat = cf.getpred()
'''
'''
## Both based
cf = CollaborativeFilter(n_items, n_users, data_matrix, type='both', similarity = 'cosine')
cf.fit()
print(cf.getpred())
'''

def get_io():
    print("You are new to the system")
    print("So please help us to make prediction for you...")
    print("Choose Following option...\n 1.Provide Age \n 2. Provide Occupation\n 3. Provide Gender(M/F)")
    choice = input("Enter choice ... ")
    try:
        choice = int(choice)
        if choice==1:
            age = int(input("Enter Your Age..."))
            return {'age':age,'flag':'age'}
        elif choice==2:
            occ = str(input("Enter your occupation.."))
            return {'occ':occ,'flag':'occ'}
        elif choice == 3:
            gen = str(input("Enter your gender(M/F)..."))
            if gen=='M':
                return {'gen':0,'flag':'gender'}
            else:
                return {'gen':1,'flag':'gender'}
    except:
        print("Invalid Input")
        

if __name__ == "__main__":
    print("Welcome to the Movie Recommendation ... ")
    cf = CollaborativeFilter(n_items, n_users, data_matrix, type='item', similarity = 'cosine')
    cf.fit()
    pred_mat = cf.getpred()
    while True:
        try:
            user_id = int(input("Enter user id : "))
            M = pred_mat['item']
            number_of_movie = 10
            recommendation(user_id,M,number_of_movie,movies_info,age_wise,occupation_wise,gender_wise,distinct_age)
        except:
            break